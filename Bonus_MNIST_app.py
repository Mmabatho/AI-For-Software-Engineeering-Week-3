{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNbo/NvGTGXdySzd/VgXiVP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mmabatho/AI-For-Software-Engineeering-Week-3/blob/Mmabatho/Task2Week3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "wIPJBFSTrsge",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "82fa8d9c-1ff3-4113-e1f0-ac1c5c94a48d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cpu\n",
            "\n",
            "1. LOADING AND PREPROCESSING DATA\n",
            "-----------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 9.91M/9.91M [00:00<00:00, 19.1MB/s]\n",
            "100%|██████████| 28.9k/28.9k [00:00<00:00, 1.66MB/s]\n",
            "100%|██████████| 1.65M/1.65M [00:00<00:00, 14.3MB/s]\n",
            "100%|██████████| 4.54k/4.54k [00:00<00:00, 4.81MB/s]\n",
            "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training dataset size: 60000\n",
            "Test dataset size: 10000\n",
            "Number of classes: 10\n",
            "Image shape: torch.Size([1, 28, 28])\n",
            "Batch size: 64\n",
            "\n",
            "2. DEFINING CNN MODEL ARCHITECTURE\n",
            "-----------------------------------\n",
            "MNISTConvNet(\n",
            "  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (fc1): Linear(in_features=128, out_features=128, bias=True)\n",
            "  (fc2): Linear(in_features=128, out_features=10, bias=True)\n",
            "  (dropout1): Dropout2d(p=0.25, inplace=False)\n",
            "  (dropout2): Dropout2d(p=0.5, inplace=False)\n",
            "  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (bn3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            ")\n",
            "Total parameters: 110,922\n",
            "Trainable parameters: 110,922\n",
            "\n",
            "3. DEFINING LOSS FUNCTION AND OPTIMIZER\n",
            "----------------------------------------\n",
            "Loss function: NLLLoss\n",
            "Optimizer: Adam\n",
            "Initial learning rate: 0.001\n",
            "\n",
            "4. TRAINING THE MODEL\n",
            "--------------------\n",
            "Training for 5 epochs...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/torch/nn/functional.py:1538: UserWarning: dropout2d: Received a 2-D input to dropout2d, which is deprecated and will result in an error in a future release. To retain the behavior and silence this warning, please use dropout instead. Note that dropout2d exists to provide channel-wise dropout on inputs with 2 spatial dimensions, a channel dimension, and an optional batch dimension (i.e. 3D or 4D inputs).\n",
            "  warnings.warn(warn_msg)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Epoch: 1 [0/60000 (0%)]\tLoss: 2.411336\n",
            "Train Epoch: 1 [6400/60000 (11%)]\tLoss: 0.363827\n",
            "Train Epoch: 1 [12800/60000 (21%)]\tLoss: 0.293767\n",
            "Train Epoch: 1 [19200/60000 (32%)]\tLoss: 0.203007\n",
            "Train Epoch: 1 [25600/60000 (43%)]\tLoss: 0.382697\n",
            "Train Epoch: 1 [32000/60000 (53%)]\tLoss: 0.204514\n",
            "Train Epoch: 1 [38400/60000 (64%)]\tLoss: 0.061971\n",
            "Train Epoch: 1 [44800/60000 (75%)]\tLoss: 0.075803\n",
            "Train Epoch: 1 [51200/60000 (85%)]\tLoss: 0.167461\n",
            "Train Epoch: 1 [57600/60000 (96%)]\tLoss: 0.026342\n",
            "\n",
            "Test set: Average loss: 0.0580, Accuracy: 9834/10000 (98.34%)\n",
            "\n",
            "New best model saved with accuracy: 98.34%\n",
            "Epoch 1 completed in 110.29 seconds\n",
            "Train Accuracy: 92.92%, Test Accuracy: 98.34%\n",
            "------------------------------------------------------------\n",
            "Train Epoch: 2 [0/60000 (0%)]\tLoss: 0.023955\n",
            "Train Epoch: 2 [6400/60000 (11%)]\tLoss: 0.074248\n",
            "Train Epoch: 2 [12800/60000 (21%)]\tLoss: 0.050872\n",
            "Train Epoch: 2 [19200/60000 (32%)]\tLoss: 0.136907\n",
            "Train Epoch: 2 [25600/60000 (43%)]\tLoss: 0.071142\n",
            "Train Epoch: 2 [32000/60000 (53%)]\tLoss: 0.099107\n",
            "Train Epoch: 2 [38400/60000 (64%)]\tLoss: 0.080237\n",
            "Train Epoch: 2 [44800/60000 (75%)]\tLoss: 0.232832\n",
            "Train Epoch: 2 [51200/60000 (85%)]\tLoss: 0.025889\n",
            "Train Epoch: 2 [57600/60000 (96%)]\tLoss: 0.030416\n",
            "\n",
            "Test set: Average loss: 0.0457, Accuracy: 9863/10000 (98.63%)\n",
            "\n",
            "New best model saved with accuracy: 98.63%\n",
            "Epoch 2 completed in 107.78 seconds\n",
            "Train Accuracy: 97.44%, Test Accuracy: 98.63%\n",
            "------------------------------------------------------------\n",
            "Train Epoch: 3 [0/60000 (0%)]\tLoss: 0.010437\n",
            "Train Epoch: 3 [6400/60000 (11%)]\tLoss: 0.198035\n",
            "Train Epoch: 3 [12800/60000 (21%)]\tLoss: 0.133454\n",
            "Train Epoch: 3 [19200/60000 (32%)]\tLoss: 0.053959\n",
            "Train Epoch: 3 [25600/60000 (43%)]\tLoss: 0.215817\n",
            "Train Epoch: 3 [32000/60000 (53%)]\tLoss: 0.043725\n",
            "Train Epoch: 3 [38400/60000 (64%)]\tLoss: 0.031007\n",
            "Train Epoch: 3 [44800/60000 (75%)]\tLoss: 0.058473\n",
            "Train Epoch: 3 [51200/60000 (85%)]\tLoss: 0.157748\n",
            "Train Epoch: 3 [57600/60000 (96%)]\tLoss: 0.098836\n",
            "\n",
            "Test set: Average loss: 0.0376, Accuracy: 9888/10000 (98.88%)\n",
            "\n",
            "New best model saved with accuracy: 98.88%\n",
            "Epoch 3 completed in 105.61 seconds\n",
            "Train Accuracy: 97.98%, Test Accuracy: 98.88%\n",
            "------------------------------------------------------------\n",
            "Train Epoch: 4 [0/60000 (0%)]\tLoss: 0.012284\n",
            "Train Epoch: 4 [6400/60000 (11%)]\tLoss: 0.030973\n",
            "Train Epoch: 4 [12800/60000 (21%)]\tLoss: 0.097209\n",
            "Train Epoch: 4 [19200/60000 (32%)]\tLoss: 0.021664\n",
            "Train Epoch: 4 [25600/60000 (43%)]\tLoss: 0.021539\n",
            "Train Epoch: 4 [32000/60000 (53%)]\tLoss: 0.012671\n",
            "Train Epoch: 4 [38400/60000 (64%)]\tLoss: 0.027250\n",
            "Train Epoch: 4 [44800/60000 (75%)]\tLoss: 0.016428\n",
            "Train Epoch: 4 [51200/60000 (85%)]\tLoss: 0.012435\n",
            "Train Epoch: 4 [57600/60000 (96%)]\tLoss: 0.023358\n",
            "\n",
            "Test set: Average loss: 0.0372, Accuracy: 9890/10000 (98.90%)\n",
            "\n",
            "New best model saved with accuracy: 98.90%\n",
            "Epoch 4 completed in 109.17 seconds\n",
            "Train Accuracy: 98.28%, Test Accuracy: 98.90%\n",
            "------------------------------------------------------------\n",
            "Train Epoch: 5 [0/60000 (0%)]\tLoss: 0.028633\n",
            "Train Epoch: 5 [6400/60000 (11%)]\tLoss: 0.018774\n",
            "Train Epoch: 5 [12800/60000 (21%)]\tLoss: 0.063338\n",
            "Train Epoch: 5 [19200/60000 (32%)]\tLoss: 0.072435\n",
            "Train Epoch: 5 [25600/60000 (43%)]\tLoss: 0.019187\n",
            "Train Epoch: 5 [32000/60000 (53%)]\tLoss: 0.005461\n",
            "Train Epoch: 5 [38400/60000 (64%)]\tLoss: 0.060895\n",
            "Train Epoch: 5 [44800/60000 (75%)]\tLoss: 0.007855\n",
            "Train Epoch: 5 [51200/60000 (85%)]\tLoss: 0.102651\n",
            "Train Epoch: 5 [57600/60000 (96%)]\tLoss: 0.031706\n",
            "\n",
            "Test set: Average loss: 0.0362, Accuracy: 9906/10000 (99.06%)\n",
            "\n",
            "New best model saved with accuracy: 99.06%\n",
            "Epoch 5 completed in 107.53 seconds\n",
            "Train Accuracy: 98.43%, Test Accuracy: 99.06%\n",
            "------------------------------------------------------------\n",
            "Training completed in 540.38 seconds\n",
            "Best test accuracy: 99.06%\n",
            "\n",
            "5. FINAL MODEL EVALUATION\n",
            "-------------------------\n",
            "\n",
            "Test set: Average loss: 0.0362, Accuracy: 9906/10000 (99.06%)\n",
            "\n",
            "Final model test accuracy: 99.06%\n",
            "✅ Goal achieved! Test accuracy > 95%\n",
            "\n",
            "6. VISUALIZING PREDICTIONS\n",
            "-------------------------\n",
            "Predictions visualization saved as 'mnist_predictions.png'\n",
            "\n",
            "Prediction details:\n",
            "Sample 1: Predicted 5, Actual 5 ✓\n",
            "Sample 2: Predicted 9, Actual 9 ✓\n",
            "Sample 3: Predicted 7, Actual 7 ✓\n",
            "Sample 4: Predicted 3, Actual 3 ✓\n",
            "Sample 5: Predicted 1, Actual 1 ✓\n",
            "\n",
            "7. MODEL PERFORMANCE ANALYSIS\n",
            "------------------------------\n",
            "Training curves saved as 'mnist_training_curves.png'\n",
            "Confusion matrix saved as 'mnist_confusion_matrix.png'\n",
            "\n",
            "Per-class accuracy:\n",
            "Digit 0: 99.18%\n",
            "Digit 1: 99.65%\n",
            "Digit 2: 98.26%\n",
            "Digit 3: 99.21%\n",
            "Digit 4: 99.69%\n",
            "Digit 5: 99.10%\n",
            "Digit 6: 99.16%\n",
            "Digit 7: 98.64%\n",
            "Digit 8: 99.49%\n",
            "Digit 9: 98.22%\n",
            "\n",
            "============================================================\n",
            "SUMMARY\n",
            "============================================================\n",
            "Model: CNN with 110,922 parameters\n",
            "Best test accuracy: 99.06%\n",
            "Training time: 540.38 seconds\n",
            "\n",
            "✅ GOAL ACHIEVED: Test accuracy > 95%\n",
            "\n",
            "Key insights:\n",
            "- The model converged quickly\n",
            "- All digits are classified with high accuracy\n",
            "- The most challenging digit to classify: 9\n",
            "- The easiest digit to classify: 4\n",
            "\n",
            "============================================================\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x300 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\"\"\"\n",
        "Deep Learning with PyTorch: MNIST Handwritten Digits Classification\n",
        "==================================================================\n",
        "\n",
        "This script demonstrates a complete deep learning pipeline using PyTorch:\n",
        "1. Data loading and preprocessing\n",
        "2. CNN model architecture\n",
        "3. Training loop\n",
        "4. Model evaluation\n",
        "5. Visualization of predictions\n",
        "\"\"\"\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "import time\n",
        "import random\n",
        "\n",
        "# Set random seeds for reproducibility\n",
        "torch.manual_seed(42)\n",
        "random.seed(42)\n",
        "np.random.seed(42)\n",
        "\n",
        "# Check if CUDA is available\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"Using device: {device}\")\n",
        "\n",
        "# Step 1: Data Loading and Preprocessing\n",
        "print(\"\\n1. LOADING AND PREPROCESSING DATA\")\n",
        "print(\"-\" * 35)\n",
        "\n",
        "# Define transformations\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),  # Convert images to PyTorch tensors\n",
        "    transforms.Normalize((0.1307,), (0.3081,))  # Normalize with MNIST mean and std\n",
        "])\n",
        "\n",
        "# Load MNIST dataset\n",
        "train_dataset = datasets.MNIST('./data', train=True, download=True, transform=transform)\n",
        "test_dataset = datasets.MNIST('./data', train=False, download=True, transform=transform)\n",
        "\n",
        "# Create data loaders\n",
        "batch_size = 64\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "print(f\"Training dataset size: {len(train_dataset)}\")\n",
        "print(f\"Test dataset size: {len(test_dataset)}\")\n",
        "print(f\"Number of classes: {len(train_dataset.classes)}\")\n",
        "print(f\"Image shape: {train_dataset[0][0].shape}\")\n",
        "print(f\"Batch size: {batch_size}\")\n",
        "\n",
        "# Step 2: Define CNN Model Architecture\n",
        "print(\"\\n2. DEFINING CNN MODEL ARCHITECTURE\")\n",
        "print(\"-\" * 35)\n",
        "\n",
        "class MNISTConvNet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MNISTConvNet, self).__init__()\n",
        "        # First convolutional layer\n",
        "        # Input: 1x28x28, Output: 32x26x26\n",
        "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3)\n",
        "\n",
        "        # Second convolutional layer\n",
        "        # Input: 32x13x13 (after pooling), Output: 64x11x11\n",
        "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)\n",
        "\n",
        "        # Third convolutional layer\n",
        "        # Input: 64x5x5 (after pooling), Output: 128x3x3\n",
        "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3)\n",
        "\n",
        "        # Fully connected layers\n",
        "        self.fc1 = nn.Linear(128 * 1 * 1, 128)  # After 2 max pooling operations\n",
        "        self.fc2 = nn.Linear(128, 10)  # 10 output classes (digits 0-9)\n",
        "\n",
        "        # Dropout for regularization\n",
        "        self.dropout1 = nn.Dropout2d(0.25)\n",
        "        self.dropout2 = nn.Dropout2d(0.5)\n",
        "\n",
        "        # Batch normalization\n",
        "        self.bn1 = nn.BatchNorm2d(32)\n",
        "        self.bn2 = nn.BatchNorm2d(64)\n",
        "        self.bn3 = nn.BatchNorm2d(128)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # First conv block\n",
        "        x = self.conv1(x)\n",
        "        x = self.bn1(x)\n",
        "        x = F.relu(x)\n",
        "        x = F.max_pool2d(x, 2)  # 32x13x13\n",
        "\n",
        "        # Second conv block\n",
        "        x = self.conv2(x)\n",
        "        x = self.bn2(x)\n",
        "        x = F.relu(x)\n",
        "        x = F.max_pool2d(x, 2)  # 64x5x5\n",
        "        x = self.dropout1(x)\n",
        "\n",
        "        # Third conv block\n",
        "        x = self.conv3(x)\n",
        "        x = self.bn3(x)\n",
        "        x = F.relu(x)\n",
        "        x = F.max_pool2d(x, 2)  # 128x1x1\n",
        "\n",
        "        # Flatten the tensor\n",
        "        x = torch.flatten(x, 1)\n",
        "\n",
        "        # Fully connected layers\n",
        "        x = self.fc1(x)\n",
        "        x = F.relu(x)\n",
        "        x = self.dropout2(x)\n",
        "        x = self.fc2(x)\n",
        "\n",
        "        # Log softmax for numerical stability\n",
        "        return F.log_softmax(x, dim=1)\n",
        "\n",
        "# Initialize the model\n",
        "model = MNISTConvNet().to(device)\n",
        "print(model)\n",
        "\n",
        "# Calculate total parameters\n",
        "total_params = sum(p.numel() for p in model.parameters())\n",
        "trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "print(f\"Total parameters: {total_params:,}\")\n",
        "print(f\"Trainable parameters: {trainable_params:,}\")\n",
        "\n",
        "# Step 3: Define Loss Function and Optimizer\n",
        "print(\"\\n3. DEFINING LOSS FUNCTION AND OPTIMIZER\")\n",
        "print(\"-\" * 40)\n",
        "\n",
        "# Using Negative Log Likelihood Loss with log_softmax outputs\n",
        "criterion = nn.NLLLoss()\n",
        "\n",
        "# Using Adam optimizer\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "# Learning rate scheduler\n",
        "scheduler = optim.lr_scheduler.ReduceLROnPlateau(\n",
        "    optimizer, mode='max', factor=0.5, patience=2, verbose=True\n",
        ")\n",
        "\n",
        "print(f\"Loss function: {criterion.__class__.__name__}\")\n",
        "print(f\"Optimizer: {optimizer.__class__.__name__}\")\n",
        "print(f\"Initial learning rate: {optimizer.param_groups[0]['lr']}\")\n",
        "\n",
        "# Step 4: Training Loop\n",
        "print(\"\\n4. TRAINING THE MODEL\")\n",
        "print(\"-\" * 20)\n",
        "\n",
        "def train(model, device, train_loader, optimizer, criterion, epoch):\n",
        "    model.train()\n",
        "    train_loss = 0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    for batch_idx, (data, target) in enumerate(train_loader):\n",
        "        data, target = data.to(device), target.to(device)\n",
        "\n",
        "        # Zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Forward pass\n",
        "        output = model(data)\n",
        "\n",
        "        # Calculate loss\n",
        "        loss = criterion(output, target)\n",
        "\n",
        "        # Backward pass and optimize\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update statistics\n",
        "        train_loss += loss.item()\n",
        "        pred = output.argmax(dim=1, keepdim=True)\n",
        "        correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "        total += target.size(0)\n",
        "\n",
        "        # Print progress\n",
        "        if batch_idx % 100 == 0:\n",
        "            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} '\n",
        "                  f'({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}')\n",
        "\n",
        "    # Return average loss and accuracy\n",
        "    return train_loss / len(train_loader), correct / total\n",
        "\n",
        "def test(model, device, test_loader, criterion):\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model(data)\n",
        "            test_loss += criterion(output, target).item()\n",
        "            pred = output.argmax(dim=1, keepdim=True)\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_loss /= len(test_loader)\n",
        "    accuracy = correct / len(test_loader.dataset)\n",
        "\n",
        "    print(f'\\nTest set: Average loss: {test_loss:.4f}, '\n",
        "          f'Accuracy: {correct}/{len(test_loader.dataset)} ({100. * accuracy:.2f}%)\\n')\n",
        "\n",
        "    return test_loss, accuracy\n",
        "\n",
        "# Training parameters\n",
        "num_epochs = 5\n",
        "best_accuracy = 0\n",
        "train_losses = []\n",
        "test_losses = []\n",
        "train_accuracies = []\n",
        "test_accuracies = []\n",
        "\n",
        "print(f\"Training for {num_epochs} epochs...\")\n",
        "start_time = time.time()\n",
        "\n",
        "for epoch in range(1, num_epochs + 1):\n",
        "    epoch_start = time.time()\n",
        "\n",
        "    # Train and test\n",
        "    train_loss, train_acc = train(model, device, train_loader, optimizer, criterion, epoch)\n",
        "    test_loss, test_acc = test(model, device, test_loader, criterion)\n",
        "\n",
        "    # Update learning rate\n",
        "    scheduler.step(test_acc)\n",
        "\n",
        "    # Save statistics\n",
        "    train_losses.append(train_loss)\n",
        "    test_losses.append(test_loss)\n",
        "    train_accuracies.append(train_acc)\n",
        "    test_accuracies.append(test_acc)\n",
        "\n",
        "    # Save best model\n",
        "    if test_acc > best_accuracy:\n",
        "        best_accuracy = test_acc\n",
        "        torch.save(model.state_dict(), \"mnist_cnn_best.pth\")\n",
        "        print(f\"New best model saved with accuracy: {100 * best_accuracy:.2f}%\")\n",
        "\n",
        "    epoch_time = time.time() - epoch_start\n",
        "    print(f\"Epoch {epoch} completed in {epoch_time:.2f} seconds\")\n",
        "    print(f\"Train Accuracy: {100 * train_acc:.2f}%, Test Accuracy: {100 * test_acc:.2f}%\")\n",
        "    print(\"-\" * 60)\n",
        "\n",
        "total_time = time.time() - start_time\n",
        "print(f\"Training completed in {total_time:.2f} seconds\")\n",
        "print(f\"Best test accuracy: {100 * best_accuracy:.2f}%\")\n",
        "\n",
        "# Step 5: Final Evaluation\n",
        "print(\"\\n5. FINAL MODEL EVALUATION\")\n",
        "print(\"-\" * 25)\n",
        "\n",
        "# Load the best model\n",
        "model.load_state_dict(torch.load(\"mnist_cnn_best.pth\"))\n",
        "model.eval()\n",
        "\n",
        "# Evaluate on test set\n",
        "final_loss, final_accuracy = test(model, device, test_loader, criterion)\n",
        "print(f\"Final model test accuracy: {100 * final_accuracy:.2f}%\")\n",
        "\n",
        "if final_accuracy > 0.95:\n",
        "    print(\"✅ Goal achieved! Test accuracy > 95%\")\n",
        "else:\n",
        "    print(\"❌ Goal not achieved. Test accuracy < 95%\")\n",
        "\n",
        "# Step 6: Visualize Predictions\n",
        "print(\"\\n6. VISUALIZING PREDICTIONS\")\n",
        "print(\"-\" * 25)\n",
        "\n",
        "def visualize_predictions(model, test_loader, device, num_samples=5):\n",
        "    # Get a batch of test data\n",
        "    dataiter = iter(test_loader)\n",
        "    images, labels = next(dataiter)\n",
        "\n",
        "    # Select random samples\n",
        "    indices = np.random.choice(len(images), num_samples, replace=False)\n",
        "    sample_images = images[indices].to(device)\n",
        "    sample_labels = labels[indices]\n",
        "\n",
        "    # Get predictions\n",
        "    with torch.no_grad():\n",
        "        outputs = model(sample_images)\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "\n",
        "    # Convert tensors to numpy for plotting\n",
        "    sample_images = sample_images.cpu().numpy()\n",
        "    predicted = predicted.cpu().numpy()\n",
        "    sample_labels = sample_labels.numpy()\n",
        "\n",
        "    # Plot the images and predictions\n",
        "    fig, axes = plt.subplots(1, num_samples, figsize=(15, 3))\n",
        "\n",
        "    for i in range(num_samples):\n",
        "        # Display image\n",
        "        axes[i].imshow(sample_images[i].squeeze(), cmap='gray')\n",
        "\n",
        "        # Set title with prediction and actual label\n",
        "        title = f\"Pred: {predicted[i]}\\nTrue: {sample_labels[i]}\"\n",
        "        color = 'green' if predicted[i] == sample_labels[i] else 'red'\n",
        "        axes[i].set_title(title, color=color)\n",
        "\n",
        "        # Remove ticks\n",
        "        axes[i].set_xticks([])\n",
        "        axes[i].set_yticks([])\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('mnist_predictions.png')\n",
        "    print(\"Predictions visualization saved as 'mnist_predictions.png'\")\n",
        "\n",
        "    # Print prediction details\n",
        "    print(\"\\nPrediction details:\")\n",
        "    for i in range(num_samples):\n",
        "        status = \"✓\" if predicted[i] == sample_labels[i] else \"✗\"\n",
        "        print(f\"Sample {i+1}: Predicted {predicted[i]}, Actual {sample_labels[i]} {status}\")\n",
        "\n",
        "# Visualize predictions on 5 random test samples\n",
        "visualize_predictions(model, test_loader, device, num_samples=5)\n",
        "\n",
        "# Step 7: Model Performance Analysis\n",
        "print(\"\\n7. MODEL PERFORMANCE ANALYSIS\")\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# Plot training and validation loss\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(range(1, num_epochs + 1), train_losses, label='Train Loss')\n",
        "plt.plot(range(1, num_epochs + 1), test_losses, label='Test Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Training and Test Loss')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(range(1, num_epochs + 1), [acc * 100 for acc in train_accuracies], label='Train Accuracy')\n",
        "plt.plot(range(1, num_epochs + 1), [acc * 100 for acc in test_accuracies], label='Test Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.title('Training and Test Accuracy')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('mnist_training_curves.png')\n",
        "print(\"Training curves saved as 'mnist_training_curves.png'\")\n",
        "\n",
        "# Calculate confusion matrix\n",
        "def plot_confusion_matrix(model, test_loader, device):\n",
        "    # Initialize confusion matrix\n",
        "    num_classes = 10\n",
        "    confusion_matrix = np.zeros((num_classes, num_classes), dtype=int)\n",
        "\n",
        "    # Evaluate model on test set\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model(data)\n",
        "            pred = output.argmax(dim=1)\n",
        "\n",
        "            # Update confusion matrix\n",
        "            for t, p in zip(target.cpu().numpy(), pred.cpu().numpy()):\n",
        "                confusion_matrix[t, p] += 1\n",
        "\n",
        "    # Plot confusion matrix\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    plt.imshow(confusion_matrix, interpolation='nearest', cmap=plt.cm.Blues)\n",
        "    plt.title('Confusion Matrix')\n",
        "    plt.colorbar()\n",
        "\n",
        "    # Add labels\n",
        "    classes = [str(i) for i in range(num_classes)]\n",
        "    tick_marks = np.arange(num_classes)\n",
        "    plt.xticks(tick_marks, classes)\n",
        "    plt.yticks(tick_marks, classes)\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.ylabel('True Label')\n",
        "\n",
        "    # Add text annotations\n",
        "    thresh = confusion_matrix.max() / 2\n",
        "    for i in range(num_classes):\n",
        "        for j in range(num_classes):\n",
        "            plt.text(j, i, format(confusion_matrix[i, j], 'd'),\n",
        "                     ha=\"center\", va=\"center\",\n",
        "                     color=\"white\" if confusion_matrix[i, j] > thresh else \"black\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('mnist_confusion_matrix.png')\n",
        "    print(\"Confusion matrix saved as 'mnist_confusion_matrix.png'\")\n",
        "\n",
        "    # Calculate per-class accuracy\n",
        "    class_accuracy = np.zeros(num_classes)\n",
        "    for i in range(num_classes):\n",
        "        class_accuracy[i] = confusion_matrix[i, i] / np.sum(confusion_matrix[i, :])\n",
        "\n",
        "    return class_accuracy\n",
        "\n",
        "# Plot confusion matrix and get per-class accuracy\n",
        "class_accuracy = plot_confusion_matrix(model, test_loader, device)\n",
        "\n",
        "# Print per-class accuracy\n",
        "print(\"\\nPer-class accuracy:\")\n",
        "for i, acc in enumerate(class_accuracy):\n",
        "    print(f\"Digit {i}: {acc*100:.2f}%\")\n",
        "\n",
        "# Print summary\n",
        "print(\"\\n\" + \"=\" * 60)\n",
        "print(\"SUMMARY\")\n",
        "print(\"=\" * 60)\n",
        "print(f\"Model: CNN with {total_params:,} parameters\")\n",
        "print(f\"Best test accuracy: {100 * best_accuracy:.2f}%\")\n",
        "print(f\"Training time: {total_time:.2f} seconds\")\n",
        "\n",
        "if final_accuracy > 0.95:\n",
        "    print(\"\\n✅ GOAL ACHIEVED: Test accuracy > 95%\")\n",
        "else:\n",
        "    print(\"\\n❌ GOAL NOT ACHIEVED: Test accuracy < 95%\")\n",
        "\n",
        "print(\"\\nKey insights:\")\n",
        "print(f\"- The model {'converged quickly' if best_accuracy > 0.98 else 'needed more training'}\")\n",
        "print(f\"- {'All' if np.all(class_accuracy > 0.9) else 'Most'} digits are classified with high accuracy\")\n",
        "print(f\"- The most challenging digit to classify: {np.argmin(class_accuracy)}\")\n",
        "print(f\"- The easiest digit to classify: {np.argmax(class_accuracy)}\")\n",
        "\n",
        "print(\"\\n\" + \"=\" * 60)\n"
      ]
    }
  ]
}
